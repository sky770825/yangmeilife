/**
 * ÈÄöÁü•Á≥ªÁµ± - Êø¨ÁëíÊàøÁî¢ÁîüÊ¥ªÂπ≥Âè∞
 * ÂäüËÉΩÔºöÊé®Êí≠ÈÄöÁü•„ÄÅÊ∂àÊÅØ‰∏≠ÂøÉ„ÄÅÊèêÈÜíÁÆ°ÁêÜ
 */

class NotificationSystem {
  constructor() {
    this.notifications = [];
    this.permission = 'default';
    this.isSupported = 'Notification' in window;
    this.init();
  }

  // ÂàùÂßãÂåñÈÄöÁü•Á≥ªÁµ±
  init() {
    this.loadNotifications();
    this.setupNotificationButton();
    this.setupServiceWorker();
    this.startPeriodicChecks();
  }

  // Ë´ãÊ±ÇÈÄöÁü•Ê¨äÈôê
  async requestPermission() {
    if (!this.isSupported) {
      this.showMessage('ÊÇ®ÁöÑÁÄèË¶ΩÂô®‰∏çÊîØÊè¥Êé®Êí≠ÈÄöÁü•', 'warning');
      return false;
    }

    try {
      const permission = await Notification.requestPermission();
      this.permission = permission;
      
      if (permission === 'granted') {
        this.showMessage('ÈÄöÁü•Ê¨äÈôêÂ∑≤ÈñãÂïüÔºÅ', 'success');
        this.savePermissionState(true);
        return true;
      } else {
        this.showMessage('ÈÄöÁü•Ê¨äÈôêË¢´ÊãíÁµï', 'error');
        this.savePermissionState(false);
        return false;
      }
    } catch (error) {
      console.error('Ë´ãÊ±ÇÈÄöÁü•Ê¨äÈôêÂ§±Êïó:', error);
      this.showMessage('Ë´ãÊ±ÇÈÄöÁü•Ê¨äÈôêÂ§±Êïó', 'error');
      return false;
    }
  }

  // ÁôºÈÄÅÊé®Êí≠ÈÄöÁü•
  async sendNotification(title, options = {}) {
    if (this.permission !== 'granted') {
      const granted = await this.requestPermission();
      if (!granted) return false;
    }

    try {
      const notification = new Notification(title, {
        icon: '/icon-192x192.png',
        badge: '/icon-72x72.png',
        tag: options.tag || 'default',
        requireInteraction: options.requireInteraction || false,
        silent: options.silent || false,
        ...options
      });

      // Ëá™ÂãïÈóúÈñâÈÄöÁü•
      setTimeout(() => {
        notification.close();
      }, options.duration || 5000);

      // ÈªûÊìäÈÄöÁü•‰∫ã‰ª∂
      notification.onclick = () => {
        window.focus();
        if (options.url) {
          window.open(options.url, '_blank');
        }
        notification.close();
      };

      return true;
    } catch (error) {
      console.error('ÁôºÈÄÅÈÄöÁü•Â§±Êïó:', error);
      this.showMessage('ÁôºÈÄÅÈÄöÁü•Â§±Êïó', 'error');
      return false;
    }
  }

  // Ê∑ªÂä†ÈÄöÁü•Âà∞Ê∂àÊÅØ‰∏≠ÂøÉ
  addNotification(notification) {
    const newNotification = {
      id: Date.now(),
      timestamp: new Date(),
      read: false,
      ...notification
    };

    this.notifications.unshift(newNotification);
    this.saveNotifications();
    this.updateNotificationBadge();
    this.showInAppNotification(newNotification);
  }

  // È°ØÁ§∫ÊáâÁî®ÂÖßÈÄöÁü•
  showInAppNotification(notification) {
    const container = document.getElementById('notificationContainer') || this.createNotificationContainer();
    
    const notificationElement = document.createElement('div');
    notificationElement.className = 'notification-item';
    notificationElement.innerHTML = `
      <div class="notification-content">
        <div class="notification-icon">${notification.icon || 'üîî'}</div>
        <div class="notification-text">
          <div class="notification-title">${notification.title}</div>
          <div class="notification-message">${notification.message}</div>
          <div class="notification-time">${this.formatTime(notification.timestamp)}</div>
        </div>
        <button class="notification-close" onclick="this.parentElement.parentElement.remove()">√ó</button>
      </div>
    `;

    container.appendChild(notificationElement);

    // Ëá™ÂãïÁßªÈô§
    setTimeout(() => {
      if (notificationElement.parentElement) {
        notificationElement.remove();
      }
    }, 5000);

    // Ê∑ªÂä†ÂãïÁï´
    notificationElement.style.opacity = '0';
    notificationElement.style.transform = 'translateX(100%)';
    setTimeout(() => {
      notificationElement.style.transition = 'all 0.3s ease';
      notificationElement.style.opacity = '1';
      notificationElement.style.transform = 'translateX(0)';
    }, 100);
  }

  // ÂâµÂª∫ÈÄöÁü•ÂÆπÂô®
  createNotificationContainer() {
    const container = document.createElement('div');
    container.id = 'notificationContainer';
    container.className = 'notification-container';
    container.innerHTML = `
      <style>
        .notification-container {
          position: fixed;
          top: 20px;
          right: 20px;
          z-index: 10000;
          max-width: 400px;
          pointer-events: none;
        }
        
        .notification-item {
          background: rgba(255, 255, 255, 0.95);
          backdrop-filter: blur(10px);
          border-radius: 10px;
          padding: 1rem;
          margin-bottom: 0.5rem;
          box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
          border-left: 4px solid #667eea;
          pointer-events: auto;
          cursor: pointer;
          transition: all 0.3s ease;
        }
        
        .notification-item:hover {
          transform: translateY(-2px);
          box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
        }
        
        .notification-content {
          display: flex;
          align-items: flex-start;
          gap: 0.75rem;
        }
        
        .notification-icon {
          font-size: 1.5rem;
          flex-shrink: 0;
        }
        
        .notification-text {
          flex: 1;
        }
        
        .notification-title {
          font-weight: bold;
          color: #1f2937;
          margin-bottom: 0.25rem;
        }
        
        .notification-message {
          color: #6b7280;
          font-size: 0.9rem;
          line-height: 1.4;
          margin-bottom: 0.25rem;
        }
        
        .notification-time {
          color: #9ca3af;
          font-size: 0.8rem;
        }
        
        .notification-close {
          background: none;
          border: none;
          font-size: 1.5rem;
          color: #9ca3af;
          cursor: pointer;
          padding: 0;
          width: 24px;
          height: 24px;
          display: flex;
          align-items: center;
          justify-content: center;
          border-radius: 50%;
          transition: all 0.2s ease;
        }
        
        .notification-close:hover {
          background: rgba(0, 0, 0, 0.1);
          color: #374151;
        }
        
        .dark .notification-item {
          background: rgba(30, 30, 30, 0.95);
          border-left-color: #818cf8;
        }
        
        .dark .notification-title {
          color: #f9fafb;
        }
        
        .dark .notification-message {
          color: #d1d5db;
        }
        
        .dark .notification-time {
          color: #9ca3af;
        }
        
        .dark .notification-close:hover {
          background: rgba(255, 255, 255, 0.1);
          color: #f9fafb;
        }
      </style>
    `;
    
    document.body.appendChild(container);
    return container;
  }

  // Ë®≠ÁΩÆÈÄöÁü•ÊåâÈàï
  setupNotificationButton() {
    // Ê™¢Êü•ÊòØÂê¶Â∑≤ÊúâÈÄöÁü•ÊåâÈàï
    if (document.getElementById('notificationBtn')) return;

    const button = document.createElement('button');
    button.id = 'notificationBtn';
    button.className = 'notification-btn';
    button.innerHTML = `
      <span class="notification-icon">üîî</span>
      <span class="notification-badge" id="notificationBadge" style="display: none;">0</span>
    `;
    button.innerHTML += `
      <style>
        .notification-btn {
          position: fixed;
          bottom: 20px;
          right: 20px;
          z-index: 1000;
          background: var(--grad-primary, linear-gradient(135deg, #667eea 0%, #764ba2 100%));
          border: none;
          border-radius: 50%;
          width: 60px;
          height: 60px;
          color: white;
          font-size: 1.5rem;
          cursor: pointer;
          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
          transition: all 0.3s ease;
          display: flex;
          align-items: center;
          justify-content: center;
          position: relative;
        }
        
        .notification-btn:hover {
          transform: scale(1.1);
          box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }
        
        .notification-badge {
          position: absolute;
          top: -5px;
          right: -5px;
          background: #ef4444;
          color: white;
          border-radius: 50%;
          width: 24px;
          height: 24px;
          font-size: 0.8rem;
          font-weight: bold;
          display: flex;
          align-items: center;
          justify-content: center;
          animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
          0%, 100% { transform: scale(1); }
          50% { transform: scale(1.1); }
        }
      </style>
    `;

    button.addEventListener('click', () => {
      this.showNotificationCenter();
    });

    document.body.appendChild(button);
  }

  // È°ØÁ§∫ÈÄöÁü•‰∏≠ÂøÉ
  showNotificationCenter() {
    // ÂâµÂª∫ÈÄöÁü•‰∏≠ÂøÉÊ®°ÊÖãÊ°Ü
    const modal = document.createElement('div');
    modal.className = 'notification-modal';
    modal.innerHTML = `
      <div class="notification-modal-content">
        <div class="notification-modal-header">
          <h2>üîî ÈÄöÁü•‰∏≠ÂøÉ</h2>
          <button class="notification-modal-close" onclick="this.closest('.notification-modal').remove()">√ó</button>
        </div>
        <div class="notification-modal-body">
          <div class="notification-actions">
            <button onclick="notificationSystem.markAllAsRead()" class="btn-secondary">ÂÖ®ÈÉ®Ê®ôÁÇ∫Â∑≤ËÆÄ</button>
            <button onclick="notificationSystem.clearAll()" class="btn-secondary">Ê∏ÖÈô§ÂÖ®ÈÉ®</button>
            <button onclick="notificationSystem.requestPermission()" class="btn-primary">ÈñãÂïüÊé®Êí≠</button>
          </div>
          <div class="notification-list" id="notificationList">
            ${this.renderNotificationList()}
          </div>
        </div>
      </div>
      <style>
        .notification-modal {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.5);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 10000;
          backdrop-filter: blur(5px);
        }
        
        .notification-modal-content {
          background: rgba(255, 255, 255, 0.95);
          backdrop-filter: blur(10px);
          border-radius: 15px;
          width: 90%;
          max-width: 600px;
          max-height: 80vh;
          overflow: hidden;
          box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        }
        
        .notification-modal-header {
          padding: 1.5rem;
          border-bottom: 1px solid #e5e7eb;
          display: flex;
          justify-content: space-between;
          align-items: center;
        }
        
        .notification-modal-header h2 {
          margin: 0;
          color: #1f2937;
        }
        
        .notification-modal-close {
          background: none;
          border: none;
          font-size: 1.5rem;
          color: #6b7280;
          cursor: pointer;
          padding: 0.5rem;
          border-radius: 50%;
          transition: all 0.2s ease;
        }
        
        .notification-modal-close:hover {
          background: rgba(0, 0, 0, 0.1);
          color: #374151;
        }
        
        .notification-modal-body {
          padding: 1.5rem;
          max-height: 60vh;
          overflow-y: auto;
        }
        
        .notification-actions {
          display: flex;
          gap: 0.5rem;
          margin-bottom: 1rem;
          flex-wrap: wrap;
        }
        
        .btn-primary, .btn-secondary {
          padding: 0.5rem 1rem;
          border-radius: 8px;
          border: none;
          cursor: pointer;
          font-size: 0.9rem;
          font-weight: 600;
          transition: all 0.3s ease;
        }
        
        .btn-primary {
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          color: white;
        }
        
        .btn-secondary {
          background: rgba(255, 255, 255, 0.9);
          color: #667eea;
          border: 2px solid #667eea;
        }
        
        .btn-primary:hover, .btn-secondary:hover {
          transform: translateY(-2px);
          box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }
        
        .notification-item-modal {
          background: rgba(255, 255, 255, 0.9);
          border-radius: 10px;
          padding: 1rem;
          margin-bottom: 0.5rem;
          border-left: 4px solid #667eea;
          transition: all 0.3s ease;
          cursor: pointer;
        }
        
        .notification-item-modal:hover {
          transform: translateY(-2px);
          box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }
        
        .notification-item-modal.unread {
          border-left-color: #ef4444;
          background: rgba(239, 68, 68, 0.05);
        }
        
        .notification-item-header {
          display: flex;
          justify-content: space-between;
          align-items: flex-start;
          margin-bottom: 0.5rem;
        }
        
        .notification-item-title {
          font-weight: bold;
          color: #1f2937;
        }
        
        .notification-item-time {
          color: #6b7280;
          font-size: 0.8rem;
        }
        
        .notification-item-message {
          color: #4b5563;
          line-height: 1.4;
        }
        
        .dark .notification-modal-content {
          background: rgba(30, 30, 30, 0.95);
        }
        
        .dark .notification-modal-header h2 {
          color: #f9fafb;
        }
        
        .dark .notification-item-modal {
          background: rgba(55, 65, 81, 0.5);
          border-left-color: #818cf8;
        }
        
        .dark .notification-item-modal.unread {
          border-left-color: #f87171;
          background: rgba(248, 113, 113, 0.1);
        }
        
        .dark .notification-item-title {
          color: #f9fafb;
        }
        
        .dark .notification-item-message {
          color: #d1d5db;
        }
      </style>
    `;

    document.body.appendChild(modal);

    // ÈªûÊìäËÉåÊôØÈóúÈñâ
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.remove();
      }
    });
  }

  // Ê∏≤ÊüìÈÄöÁü•ÂàóË°®
  renderNotificationList() {
    if (this.notifications.length === 0) {
      return '<div class="text-center text-gray-500 py-8">Êö´ÁÑ°ÈÄöÁü•</div>';
    }

    return this.notifications.map(notification => `
      <div class="notification-item-modal ${!notification.read ? 'unread' : ''}" 
           onclick="notificationSystem.markAsRead(${notification.id})">
        <div class="notification-item-header">
          <div class="notification-item-title">${notification.title}</div>
          <div class="notification-item-time">${this.formatTime(notification.timestamp)}</div>
        </div>
        <div class="notification-item-message">${notification.message}</div>
      </div>
    `).join('');
  }

  // Ê®ôË®òÁÇ∫Â∑≤ËÆÄ
  markAsRead(id) {
    const notification = this.notifications.find(n => n.id === id);
    if (notification) {
      notification.read = true;
      this.saveNotifications();
      this.updateNotificationBadge();
    }
  }

  // ÂÖ®ÈÉ®Ê®ôÁÇ∫Â∑≤ËÆÄ
  markAllAsRead() {
    this.notifications.forEach(notification => {
      notification.read = true;
    });
    this.saveNotifications();
    this.updateNotificationBadge();
    this.showMessage('ÂÖ®ÈÉ®ÈÄöÁü•Â∑≤Ê®ôÁÇ∫Â∑≤ËÆÄ', 'success');
  }

  // Ê∏ÖÈô§ÂÖ®ÈÉ®ÈÄöÁü•
  clearAll() {
    if (confirm('Á¢∫ÂÆöË¶ÅÊ∏ÖÈô§ÊâÄÊúâÈÄöÁü•ÂóéÔºü')) {
      this.notifications = [];
      this.saveNotifications();
      this.updateNotificationBadge();
      this.showMessage('ÊâÄÊúâÈÄöÁü•Â∑≤Ê∏ÖÈô§', 'success');
    }
  }

  // Êõ¥Êñ∞ÈÄöÁü•ÂæΩÁ´†
  updateNotificationBadge() {
    const badge = document.getElementById('notificationBadge');
    if (!badge) return;

    const unreadCount = this.notifications.filter(n => !n.read).length;
    if (unreadCount > 0) {
      badge.textContent = unreadCount > 99 ? '99+' : unreadCount;
      badge.style.display = 'flex';
    } else {
      badge.style.display = 'none';
    }
  }

  // Ë®≠ÁΩÆService Worker
  setupServiceWorker() {
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('/sw.js')
        .then(registration => {
          console.log('Service Worker Ë®ªÂÜäÊàêÂäü:', registration);
        })
        .catch(error => {
          console.log('Service Worker Ë®ªÂÜäÂ§±Êïó:', error);
        });
    }
  }

  // ÂÆöÊúüÊ™¢Êü•ÈÄöÁü•
  startPeriodicChecks() {
    // Ê™¢Êü•ÂûÉÂúæËªäÈÄöÁü•
    setInterval(() => {
      this.checkGarbageNotification();
    }, 60000); // ÊØèÂàÜÈêòÊ™¢Êü•‰∏ÄÊ¨°

    // Ê™¢Êü•Â§©Ê∞£ÈÄöÁü•
    setInterval(() => {
      this.checkWeatherNotification();
    }, 300000); // ÊØè5ÂàÜÈêòÊ™¢Êü•‰∏ÄÊ¨°

    // Ê™¢Êü•Âà©ÁéáÈÄöÁü•
    setInterval(() => {
      this.checkRateNotification();
    }, 600000); // ÊØè10ÂàÜÈêòÊ™¢Êü•‰∏ÄÊ¨°
  }

  // Ê™¢Êü•ÂûÉÂúæËªäÈÄöÁü•
  checkGarbageNotification() {
    const now = new Date();
    const day = now.getDay();
    const hour = now.getHours();
    
    // ÂÅáË®≠ÈÄ±‰∏Ä„ÄÅ‰∏â„ÄÅ‰∫îÊòØÂûÉÂúæËªäÊó•ÔºåÊôö‰∏ä8ÈªûÊèêÈÜí
    if ([1, 3, 5].includes(day) && hour === 20 && now.getMinutes() === 0) {
      this.addNotification({
        title: 'üóëÔ∏è ÂûÉÂúæËªäÊèêÈÜí',
        message: '‰ªäÊôö8ÈªûÊúâÂûÉÂúæËªäÔºåË´ãË®òÂæóÂÄíÂûÉÂúæÔºÅ',
        icon: 'üóëÔ∏è',
        type: 'reminder'
      });

      this.sendNotification('üóëÔ∏è ÂûÉÂúæËªäÊèêÈÜí', {
        body: '‰ªäÊôö8ÈªûÊúâÂûÉÂúæËªäÔºåË´ãË®òÂæóÂÄíÂûÉÂúæÔºÅ',
        tag: 'garbage',
        requireInteraction: true
      });
    }
  }

  // Ê™¢Êü•Â§©Ê∞£ÈÄöÁü•
  checkWeatherNotification() {
    // ÈÄôË£°ÂèØ‰ª•Êï¥ÂêàÁúüÂØ¶ÁöÑÂ§©Ê∞£API
    const hour = new Date().getHours();
    
    // ÊØèÂ§©Êó©‰∏ä8ÈªûÁôºÈÄÅÂ§©Ê∞£ÊèêÈÜí
    if (hour === 8 && new Date().getMinutes() === 0) {
      this.addNotification({
        title: 'üå§Ô∏è ‰ªäÊó•Â§©Ê∞£',
        message: '‰ªäÂ§©Â§öÈõ≤ÊôÇÊô¥ÔºåÊ∞£Ê∫´24-28¬∞CÔºåÈÅ©ÂêàÂ§ñÂá∫ÁúãÊàøÔºÅ',
        icon: 'üå§Ô∏è',
        type: 'weather'
      });

      this.sendNotification('üå§Ô∏è ‰ªäÊó•Â§©Ê∞£', {
        body: '‰ªäÂ§©Â§öÈõ≤ÊôÇÊô¥ÔºåÊ∞£Ê∫´24-28¬∞CÔºåÈÅ©ÂêàÂ§ñÂá∫ÁúãÊàøÔºÅ',
        tag: 'weather'
      });
    }
  }

  // Ê™¢Êü•Âà©ÁéáÈÄöÁü•
  checkRateNotification() {
    // ÈÄôË£°ÂèØ‰ª•Êï¥ÂêàÁúüÂØ¶ÁöÑÂà©ÁéáAPI
    const hour = new Date().getHours();
    
    // ÊØèÈÄ±‰∏ÄÊó©‰∏ä9ÈªûÁôºÈÄÅÂà©ÁéáË≥áË®ä
    if (new Date().getDay() === 1 && hour === 9 && new Date().getMinutes() === 0) {
      this.addNotification({
        title: 'üìà Âà©ÁéáË≥áË®ä',
        message: 'Êú¨ÈÄ±ÊàøË≤∏Âà©ÁéáÁ∂≠ÊåÅÂú®2.85%ÔºåÊäïË≥áÁí∞Â¢ÉËâØÂ•ΩÔºÅ',
        icon: 'üìà',
        type: 'rate'
      });

      this.sendNotification('üìà Âà©ÁéáË≥áË®ä', {
        body: 'Êú¨ÈÄ±ÊàøË≤∏Âà©ÁéáÁ∂≠ÊåÅÂú®2.85%ÔºåÊäïË≥áÁí∞Â¢ÉËâØÂ•ΩÔºÅ',
        tag: 'rate'
      });
    }
  }

  // Ê†ºÂºèÂåñÊôÇÈñì
  formatTime(timestamp) {
    const now = new Date();
    const time = new Date(timestamp);
    const diff = now - time;
    
    if (diff < 60000) return 'ÂâõÂâõ';
    if (diff < 3600000) return `${Math.floor(diff / 60000)}ÂàÜÈêòÂâç`;
    if (diff < 86400000) return `${Math.floor(diff / 3600000)}Â∞èÊôÇÂâç`;
    return time.toLocaleDateString();
  }

  // È°ØÁ§∫Ê∂àÊÅØ
  showMessage(message, type = 'info') {
    // ÂâµÂª∫Ê∂àÊÅØÂÖÉÁ¥†
    const messageEl = document.createElement('div');
    messageEl.className = `message message-${type}`;
    messageEl.textContent = message;
    
    messageEl.innerHTML += `
      <style>
        .message {
          position: fixed;
          top: 20px;
          left: 50%;
          transform: translateX(-50%);
          z-index: 10001;
          padding: 1rem 2rem;
          border-radius: 8px;
          color: white;
          font-weight: 600;
          box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
          animation: slideDown 0.3s ease;
        }
        
        .message-success { background: #10b981; }
        .message-error { background: #ef4444; }
        .message-warning { background: #f59e0b; }
        .message-info { background: #3b82f6; }
        
        @keyframes slideDown {
          from { transform: translateX(-50%) translateY(-100%); opacity: 0; }
          to { transform: translateX(-50%) translateY(0); opacity: 1; }
        }
      </style>
    `;
    
    document.body.appendChild(messageEl);
    
    // Ëá™ÂãïÁßªÈô§
    setTimeout(() => {
      messageEl.style.animation = 'slideUp 0.3s ease';
      setTimeout(() => messageEl.remove(), 300);
    }, 3000);
  }

  // ‰øùÂ≠òÈÄöÁü•Âà∞Êú¨Âú∞Â≠òÂÑ≤
  saveNotifications() {
    try {
      localStorage.setItem('notifications', JSON.stringify(this.notifications));
    } catch (error) {
      console.error('‰øùÂ≠òÈÄöÁü•Â§±Êïó:', error);
    }
  }

  // ÂæûÊú¨Âú∞Â≠òÂÑ≤ËºâÂÖ•ÈÄöÁü•
  loadNotifications() {
    try {
      const saved = localStorage.getItem('notifications');
      if (saved) {
        this.notifications = JSON.parse(saved);
        this.updateNotificationBadge();
      }
    } catch (error) {
      console.error('ËºâÂÖ•ÈÄöÁü•Â§±Êïó:', error);
      this.notifications = [];
    }
  }

  // ‰øùÂ≠òÊ¨äÈôêÁãÄÊÖã
  savePermissionState(granted) {
    try {
      localStorage.setItem('notificationPermission', granted.toString());
    } catch (error) {
      console.error('‰øùÂ≠òÊ¨äÈôêÁãÄÊÖãÂ§±Êïó:', error);
    }
  }

  // ËºâÂÖ•Ê¨äÈôêÁãÄÊÖã
  loadPermissionState() {
    try {
      const saved = localStorage.getItem('notificationPermission');
      return saved === 'true';
    } catch (error) {
      console.error('ËºâÂÖ•Ê¨äÈôêÁãÄÊÖãÂ§±Êïó:', error);
      return false;
    }
  }

  // Ê∏¨Ë©¶ÈÄöÁü•
  testNotification() {
    this.addNotification({
      title: 'üß™ Ê∏¨Ë©¶ÈÄöÁü•',
      message: 'ÈÄôÊòØ‰∏ÄÂÄãÊ∏¨Ë©¶ÈÄöÁü•ÔºåÁ¢∫Ë™çÈÄöÁü•Á≥ªÁµ±ÈÅã‰ΩúÊ≠£Â∏∏ÔºÅ',
      icon: 'üß™',
      type: 'test'
    });

    this.sendNotification('üß™ Ê∏¨Ë©¶ÈÄöÁü•', {
      body: 'ÈÄôÊòØ‰∏ÄÂÄãÊ∏¨Ë©¶ÈÄöÁü•ÔºåÁ¢∫Ë™çÈÄöÁü•Á≥ªÁµ±ÈÅã‰ΩúÊ≠£Â∏∏ÔºÅ',
      tag: 'test'
    });
  }
}

// ÂâµÂª∫ÂÖ®Â±ÄÂØ¶‰æã
window.notificationSystem = new NotificationSystem();

// È†ÅÈù¢ËºâÂÖ•ÂÆåÊàêÂæåÂàùÂßãÂåñ
document.addEventListener('DOMContentLoaded', function() {
  // Ê∑ªÂä†Ê∏¨Ë©¶ÊåâÈàïÔºàÈñãÁôºÁî®Ôºâ
  if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
    const testBtn = document.createElement('button');
    testBtn.textContent = 'Ê∏¨Ë©¶ÈÄöÁü•';
    testBtn.style.cssText = `
      position: fixed;
      bottom: 90px;
      right: 20px;
      z-index: 1000;
      background: #10b981;
      color: white;
      border: none;
      border-radius: 8px;
      padding: 0.5rem 1rem;
      cursor: pointer;
      font-size: 0.8rem;
    `;
    testBtn.onclick = () => notificationSystem.testNotification();
    document.body.appendChild(testBtn);
  }
});
